// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TriangleParticle

RWByteAddressBuffer bufSkinnedVertices;
RWByteAddressBuffer bufVertices;
RWByteAddressBuffer bufIndices;
StructuredBuffer<float3> bufOldVertices;

float triDist;
float trilerp;
float time;
float3 target;

[numthreads(64,1,1)]
void TriangleParticle (uint3 id : SV_DispatchThreadID)
{
    int index1 = bufIndices.Load((id.x * 3) * 4);
    int index2 = bufIndices.Load((id.x * 3 + 1) * 4);
    int index3 = bufIndices.Load((id.x * 3 + 2) * 4);
    
    float3 tri1 = asfloat(bufSkinnedVertices.Load3(index1 * 40));
    float3 tri2 = asfloat(bufSkinnedVertices.Load3(index2 * 40));
    float3 tri3 = asfloat(bufSkinnedVertices.Load3(index3 * 40));
    
    float3 newTri1 = tri1 + float3(0, trilerp, 0);
    float3 newTri2 = tri2 + float3(0, trilerp, 0);
    float3 newTri3 = tri3 + float3(0, trilerp, 0);
    
    bufVertices.Store3(index1 * 40, asuint(newTri1));
    bufVertices.Store3(index2 * 40, asuint(newTri2));
    bufVertices.Store3(index3 * 40, asuint(newTri3));
}



